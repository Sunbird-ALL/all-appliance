
org.ekstep.services.configuration = new(org.ekstep.services.iService.extend({
    /**
     * @member {string} domainURL
     * @memberof org.ekstep.services.metaService
     */
    configURL: function() {
        return this.getBaseURL() + this.getAPISlug() + this.getConfig('configEndPoint', '/data')
    },

    getFormConfigurations: function(data, callback) {
        this.postFromService(this.configURL() + this.getConfig('configurationUrl', '/v1/form/read'), data, this.requestHeaders, callback)
    }

}))
org.ekstep.pluginframework.pluginManager.registerPlugin({"id":"org.ekstep.sunbirdmetadata","ver":"1.1","author":"Manjunath Davanam","title":"Sunbird metadata plugin","description":"","publishedDate":"","editor":{"main":"editor/plugin.js","dependencies":[{"plugin":"org.ekstep.metadata","ver":"1.5","type":"plugin"},{"type":"js","src":"editor/services/service.js"}]}},org.ekstep.contenteditor.metadataPlugin.extend({form:{},resourceBundle:{},framework:{},config:{},mappedResponse:{},eventMap:{savemeta:"org.ekstep.contenteditor:save:meta",review:"org.ekstep.contenteditor:review",save:"org.ekstep.contenteditor:save",close:"org.ekstep.collectioneditor:content:notfound"},options:{savingPopup:!1,successPopup:!0,failPopup:!0,contentMeta:{},showNotification:!0,callback:void 0},initialize:function(){ecEditor.addEventListener("editor:form:cancel",this.cancelAction,this),ecEditor.addEventListener("editor:form:success",this.successAction,this),ecEditor.addEventListener("editor:form:change",this.onConfigChange,this),ecEditor.addEventListener("editor:form:reset",this.resetFields,this),ecEditor.addEventListener("org.ekstep.editcontentmeta:showpopup",this.invoke,this),ecEditor.addEventListener("editor:form:getconfig",this.returnConfigs,this)},invoke:function(e,o){var t,i=this;i.model=o.metadata,i.editMode=o.editMode,i.startLoadTime=new Date,this.isConfigurationsExists(o.subType,o.action)?(t=i.getMappedResponse(o.subType,o.action),i.renderForm(o.popup,{resourceBundle:t.resourceBundle,framework:t.framework,formConfig:t.formConfig})):this.getConfigurations(o,function(e,t){t?(i.mapResponse(o.subType,o.action,{resourceBundle:t.resourceBundle,framework:t.framework.data.result.framework,formConfig:t.config.data.result.form.data}),i.renderForm(o.popup,{resourceBundle:t.resourceBundle,framework:t.framework.data.result.framework,formConfig:t.config.data.result.form.data})):console.error("Fails to render",e)})},onConfigChange:function(e,t){},successAction:function(e,o){if(!o.isValid)throw"Invalid form data";"application/vnd.ekstep.content-collection"===o.formData.metaData.mimeType&&this.updateState(o.formData);function t(e,t){t&&t.data&&"OK"==t.data.responseCode?o.callback&&o.callback(void 0,t):o.callback&&o.callback(e,void 0)}switch(this.config.action){case"review":this.reviewContent(o.formData.metaData,t);break;case"save":this.saveMeta(o.formData.metaData,t);break;default:ecEditor.dispatchEvent("editor:form:data",o)}},reviewContent:function(e,o){function i(e,t){e||ecEditor.dispatchEvent(n.eventMap.close),o()}var n=this;this.saveContent(e,function(e,t){if(e)throw"Unable to update the fields value before sending to review status";ecEditor.dispatchEvent(n.eventMap[n.config.action],i)})},saveMeta:function(e,t){this.options.contentMeta=e,this.options.callback=t,ecEditor.dispatchEvent(this.eventMap.savemeta,this.options)},saveContent:function(e,t){switch(e.mimeType){case"application/vnd.ekstep.content-collection":case"application/vnd.ekstep.ecml-archive":this.options.contentMeta=e,this.options.callback=t,ecEditor.dispatchEvent(this.eventMap.save,this.options);break;default:this.options=e,this.options.callback=t,ecEditor.dispatchEvent(this.eventMap.save,this.options)}},cancelAction:function(e,t){t.callback&&t.callback()},getConfigurations:function(t,o){async.parallel({config:function(o){org.ekstep.services.configuration.getFormConfigurations({request:t},function(e,t){e?o(e,void 0):o(void 0,t)})},framework:function(o){var e=ecEditor.getService("content").getContentMeta(org.ekstep.contenteditor.api.getContext("contentId")),e=t.framework||e.framework;ecEditor.getService(ServiceConstants.META_SERVICE).getCategorys(e,function(e,t){e?o(e,void 0):o(void 0,t)})},resourceBundle:function(e){e(void 0,{})}},function(e,t){e&&ecEditor.dispatchEvent("org.ekstep.toaster:error",{message:"Unable to open form!",position:"topCenter",icon:"fa fa-warning"}),o(e,t)})},getFields:function(){return this.form},getTemplate:function(){return this.config.templateName},renderForm:function(t,e){var o=this;this.resourceBundle=e.resourceBundle,this.framework=e.framework,this.config=e.formConfig,this.form=this.mapObject(this.config.fields,this.framework.categories),this.loadTemplate(this.config.templateName,function(e){t?o.showForm():ecEditor.dispatchEvent("editor:template:loaded",{templatePath:e,formAction:o.config.action})})},updateState:function(e){var t=!0,o=ecEditor.getService("content").getContentMeta(org.ekstep.contenteditor.api.getContext("contentId")),o=(!_.isEmpty(o)&&_.has(o,["name"])&&(t=!1),e.nodeId),i={};i.root=e.isRoot||!0,i.isNew=e.isNew||t,i.metadata=e.metaData,org.ekstep.services.stateService.create("nodesModified"),org.ekstep.services.stateService.setState("nodesModified",o,i)},mapResponse:function(e,t,o){this.mappedResponse[e+"_"+t]=o},isConfigurationsExists:function(e,t){return!!this.mappedResponse[e+"_"+t]},getMappedResponse:function(e,t){return this.mappedResponse[e+"_"+t]},getModel:function(){return this.model||ecEditor.getService("content").getContentMeta(org.ekstep.contenteditor.api.getContext("contentId"))},returnConfigs:function(e,t){t({model:this.getModel(),template:this.config.templateName||this.DEFAULT_TEMPLATE_NAME,fields:this.form,editMode:this.editMode,messages:this.config.messages})}}))